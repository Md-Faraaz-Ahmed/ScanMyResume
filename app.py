import streamlit as st
from nltk.tokenize import RegexpTokenizer
import PyPDF2
import plotly.graph_objects as go
import re

# ---------- Utility Functions ----------
def process_text(text):
    tokenizer = RegexpTokenizer(r'\w+')
    return tokenizer.tokenize(text.lower())

def get_matched_keywords(tokens, keywords):
    found = list(set(token for token in tokens if token in keywords))
    return found, len(found), len(keywords)

def highlight_text(text, matched_keywords):
    escaped_keywords = [re.escape(kw) for kw in matched_keywords]
    pattern = r'\b(' + '|'.join(escaped_keywords) + r')\b'

    def repl(match):
        return f'<mark style="background-color:#a1c9f4; padding:0 3px; border-radius:3px;">{match.group(0)}</mark>'

    highlighted_text = re.sub(pattern, repl, text, flags=re.IGNORECASE)
    highlighted_text = highlighted_text.replace('\n', '<br>')
    return highlighted_text

def extract_text_from_pdf(uploaded_file):
    reader = PyPDF2.PdfReader(uploaded_file)
    text = ""
    for page in reader.pages:
        text += page.extract_text() or ""
    return text

def generate_ats_report_html(matched, count, total, match_pct):
    matched_sorted = sorted(matched)
    html = f"""
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8" />
        <title>ATS Score Report</title>
        <style>
            body {{
                font-family: Arial, sans-serif;
                background-color: #f4f7fc;
                margin: 20px;
                color: #333;
            }}
            h1 {{
                color: #2a7ae2;
                border-bottom: 2px solid #2a7ae2;
                padding-bottom: 10px;
            }}
            .summary {{
                background-color: #e7f0fe;
                padding: 15px;
                border-radius: 8px;
                margin-bottom: 20px;
                font-size: 18px;
            }}
            .matched-keywords {{
                background-color: #d2e8ff;
                padding: 15px;
                border-radius: 8px;
                font-size: 16px;
                max-height: 200px;
                overflow-y: auto;
            }}
            table {{
                width: 100%;
                border-collapse: collapse;
                margin-top: 10px;
            }}
            th, td {{
                text-align: left;
                padding: 8px;
                border-bottom: 1px solid #ddd;
            }}
            th {{
                background-color: #2a7ae2;
                color: white;
            }}
            .footer {{
                margin-top: 30px;
                font-style: italic;
                color: #666;
            }}
        </style>
    </head>
    <body>
        <h1>üß† Resume Keyword Highlighter - ATS Score Report</h1>
        <div class="summary">
            <table>
                <tr><th>Total Keywords</th><td>{total}</td></tr>
                <tr><th>Keywords Matched</th><td>{count}</td></tr>
                <tr><th>Match Percentage</th><td>{match_pct}%</td></tr>
            </table>
        </div>
        <div class="matched-keywords">
            <strong>Matched Keywords:</strong>
            <ul>
                {''.join(f'<li>{kw}</li>' for kw in matched_sorted)}
            </ul>
        </div>
        <div class="footer">
            Keep optimizing your resume for better ATS results!<br/>
            Generated by Resume Keyword Highlighter.
        </div>
    </body>
    </html>
    """
    return html

# ---------- Force Light Mode ----------
st.set_page_config(page_title="Resume Keyword Highlighter + ATS Score", page_icon="üß†", layout="wide")
st.markdown("""
    <style>
        body, .main { background-color: #ffffff !important; color: #000000 !important; }
        .stButton>button { width: 100%; height: 3em; font-size: 1.1em; }
        .stTextArea textarea { font-size: 0.9em; }
    </style>
""", unsafe_allow_html=True)

# ---------- Title ----------
st.title("ScanMyResume")
st.title("üß† Resume Keyword Highlighter + ATS Score")
st.markdown("Highlight job-specific keywords in your resume and see how well it matches the job description (ATS score).")

# ---------- Session State ----------
if 'resume_text' not in st.session_state:
    st.session_state.resume_text = ""
if 'keywords_text' not in st.session_state:
    st.session_state.keywords_text = ""

# ---------- Clear All ----------
def clear_all():
    st.session_state.resume_text = ""
    st.session_state.keywords_text = ""

# ---------- Layout ----------
col1, col2 = st.columns(2)

with col1:
    st.subheader("üìÑ Resume Input")
    resume_file = st.file_uploader("Upload Resume (.txt or .pdf)", type=["txt", "pdf"])
    if resume_file:
        if resume_file.type == "application/pdf":
            st.session_state.resume_text = extract_text_from_pdf(resume_file)
        else:
            st.session_state.resume_text = resume_file.read().decode("utf-8")
    st.session_state.resume_text = st.text_area("Or paste your resume text here", value=st.session_state.resume_text, height=250)

with col2:
    st.subheader("üîë Keywords Input")
    keywords_file = st.file_uploader("Upload Keywords (.txt)", type="txt")
    if keywords_file:
        st.session_state.keywords_text = keywords_file.read().decode("utf-8")
    st.session_state.keywords_text = st.text_area("Or enter keywords (one per line)", value=st.session_state.keywords_text, height=250)

# ---------- Action Buttons ----------
col3, col4 = st.columns([3, 1])
with col3:
    run_button = st.button("üöÄ Highlight Resume")
with col4:
    st.button("üßπ Clear All", on_click=clear_all)

# ---------- Main Logic ----------
if run_button:
    resume_input = st.session_state.resume_text
    keywords_input = st.session_state.keywords_text

    if resume_input and keywords_input:
        tokens = process_text(resume_input)
        keywords = [kw.strip().lower() for kw in keywords_input.strip().splitlines() if kw.strip()]
        matched, count, total = get_matched_keywords(tokens, keywords)
        match_pct = int((count / total) * 100) if total else 0

        # --- ATS Score Display and Download Button ---
        st.markdown("### üßæ ATS Score")
        col_ats_score, col_ats_download = st.columns([3, 1])
        with col_ats_score:
            st.progress(match_pct)
            st.metric(label="Match Score (%)", value=f"{match_pct}%")
            if match_pct >= 80:
                st.success("Excellent match! Your resume is highly optimized for the job.")
            elif match_pct >= 50:
                st.info("Decent match. Consider adding more relevant keywords.")
            else:
                st.warning("Low match. Your resume might not pass ATS filters. Try optimizing it.")

        with col_ats_download:
            ats_report_html = generate_ats_report_html(matched, count, total, match_pct)
            st.download_button(
                label="üì• Download ATS Report",
                data=ats_report_html,
                file_name="ats_report.html",
                mime="text/html",
                key="download_ats_report"
            )

        # --- Matched Keywords ---
        st.markdown("### üß© Matched Keywords")
        st.success(f"‚úÖ Found {count} out of {total} keywords ({match_pct}%)")
        st.markdown(f"**Matched Keywords:** `{', '.join(matched)}`")

        # --- Visualization ---
        fig = go.Figure(data=[
            go.Bar(name='Matched', x=['Keywords'], y=[count], marker_color='green'),
            go.Bar(name='Remaining', x=['Keywords'], y=[total - count], marker_color='lightgray')
        ])
        fig.update_layout(barmode='stack', height=300, title="üìä Keyword Match Visualization")
        st.plotly_chart(fig, use_container_width=True)

        # --- Highlighted Resume Text ---
        highlighted = highlight_text(resume_input, matched)  # preserve casing and formatting
        st.markdown("### üìò Highlighted Resume:")
        st.markdown(f'<div style="white-space: pre-wrap; font-family: monospace; font-size: 14px;">{highlighted}</div>', unsafe_allow_html=True)
    else:
        st.warning("‚ö†Ô∏è Please provide both resume and keywords.")
